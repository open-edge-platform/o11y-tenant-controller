# SPDX-FileCopyrightText: (C) 2025 Intel Corporation
# SPDX-License-Identifier: Apache-2.0

name: Bump Version Comment

on:
  issue_comment:
    types: [created]

permissions: {}

jobs:
  bump-version:
    if: >
      github.event.issue.pull_request != null &&
      (github.event.comment.body == '//bumpversion' ||
      github.event.comment.body == '//bumpVersion' ||
      github.event.comment.body == '//bump version' ||
      github.event.comment.body == '//bump_version')
    permissions:
      contents: write
      issues: read
      pull-requests: read
    runs-on: "ubuntu-latest"
    steps:
      # issue_comment-based workflows don't have github.base_ref and github.head_ref set, so we need to use GitHub API to get them
      # https://github.com/orgs/community/discussions/49628
      # https://github.com/orgs/community/discussions/25917
      - name: "Get base_ref and head_ref"
        id: request
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # 7.0.1
        with:
          script: |
            const request = {
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number
            }
            core.info(`Getting PR #${request.pull_number} from ${request.owner}/${request.repo}`)
            try {
              const result = await github.rest.pulls.get(request)
              return result.data
            } catch (err) {
              core.setFailed(`Request failed with error ${err}`)
            }

      - name: "Check out repository code"
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        if: success()
        with:
          ref: ${{ fromJson(steps.request.outputs.result).head.ref }}
          fetch-depth: 0
          fetch-tags: true
          token: ${{ secrets.SYS_ORCH_GITHUB_APPROVE }}

      - name: "Git safe directory"
        run: git config --global --add safe.directory $GITHUB_WORKSPACE

      - name: "Validate clean folder"
        run: |
          bash -c "diff -u <(echo -n) <(git diff .)"

      - name: "Process VERSION"
        run: |
          semverParse() {
            eval "$2"="$(expr "$1" : '^[^[:digit:]]*\([[:digit:]]*\)\..*$' )"  # MAJOR
            eval "$3"="$(expr "$1" : '^[^[:digit:]]*[[:digit:]]*\.\([[:digit:]]*\)\..*$' )"  # MINOR
            eval "$4"="$(expr "$1" : '^[^[:digit:]]*[[:digit:]]*\.[[:digit:]]*\.\([[:digit:]]*\).*$' )"  # PATCH
          }

          head_ref=${{ fromJson(steps.request.outputs.result).head.ref }} # source branch
          base_ref=${{ fromJson(steps.request.outputs.result).base.ref }} # target branch

          base_version=$(git show origin/$base_ref:VERSION | tr -d '[:space:]')
          current_version=$(cat VERSION | tr -d '[:space:]')

          echo "Base version: $base_version"
          echo "Current version: $current_version"

          semverParse "$base_version" base_major base_minor base_patch
          semverParse "$current_version" current_major current_minor current_patch

          if [ $current_major -gt $base_major ] || ([ $current_major -eq $base_major ] && [ $current_minor -gt $base_minor ]) || ([ $current_major -eq $base_major ] && [ $current_minor -eq $base_minor ] && [ $current_patch -gt $base_patch ]); then
            echo "Version in "$head_ref" branch is already greater than in "$base_ref" branch. Not updating VERSION file."
          else
            new_patch=$((base_patch + 1))
            new_version="$base_major.$base_minor.$new_patch"
            echo "Updating version from $current_version to $new_version"
            echo "$new_version" > VERSION
            echo "" >> VERSION
          
            echo "Running `make helm-build`"
            make helm-build     
          fi

      - name: "Commit and push changes"
        run: |
          if ! bash -c "diff -u <(echo -n) <(git diff .)"; then
            git config --global user.name 'github-actions[bot]'
            git config --global user.email 'github-actions[bot]@users.noreply.github.com'
            git add .
            git commit -m "Bump version"
            git push origin HEAD          
          else
            echo "No version-related changes to commit."
          fi
